#!/usr/bin/env perl

use strict;
use warnings;
use Mojolicious::Lite -signatures;
use Mojo::IOLoop;
use Mojo::UserAgent;

my $offersRunning = 0;
my $walletRunning = 0;

warn "SCRIP START... waiting 20 seconds...";
sleep(20);

Mojo::IOLoop->recurring(10 => sub ($ioloop) {
  warn "MAIN LOOP TICK";
  &runOffersLedger(app);
  &runWalletLedger(app);
});

get '/health' => sub ($c) {
  $c->render(json => {status => 'OK'});
};

sub runOffersLedger($self) {

  if($offersRunning){
    warn "OFFERS IS RUNNING";
  };

  return if $offersRunning;

  warn "GOING TO RUN OFFERS...";

  $offersRunning = 1;
  Mojo::IOLoop->subprocess->run_p(sub {
    #my $ua = Mojo::UserAgent->new;
    #my $tx = $ua->get('https://docs.mojolicious.org/Mojo' => {Accept => 'text/plain'});
    #my $res = $tx->result;
    warn 'Starting work in offers process';
    sleep 30;
    warn 'Work in offers process is done';
  })->then(sub (@results) {
    $offersRunning = 0;
    warn "OFFERS RUN OK";
  })->catch(sub ($err) {
    $offersRunning = 0;
    warn "OFFERS RUN ERROR ";
  });
}

sub runWalletLedger($self) {
  if($walletRunning){
    warn "WALLET IS RUNNING";
  };

  return if $walletRunning;

  warn "GOING TO RUN WALLET...";

  $walletRunning = 1;
  Mojo::IOLoop->subprocess->run_p(sub {
    #my $ua = Mojo::UserAgent->new;
    #my $tx = $ua->get('https://docs.mojolicious.org/Mojo' => {Accept => 'text/plain'});
    #my $res = $tx->result;
    warn 'Starting work in wallet process';
    sleep 30;
    warn 'Work in wallet process is done';
  })->then(sub (@results) {
    $walletRunning = 0;
    warn "WALLET RUN OK";
  })->catch(sub ($err) {
    $walletRunning = 0;
    warn "WALLET RUN ERROR";
  });
}


#my $dsn = qq|DBI:MariaDB:database=$ENV{OFFERS_DB_NAME};host=$ENV{OFFERS_DB_HOST};port=$ENV{OFFERS_DB_PORT}|;
#app->helper(mysql => sub { state $mysql = Mojo::mysql->strict_mode() });
#app->mysql->dsn($dsn);
#app->mysql->username($ENV{OFFERS_DB_USER});
#app->mysql->password($ENV{OFFERS_DB_PASS});

warn "RUNNING APP";
app->plugin('NotYAMLConfig');
app->renderer->default_format('json');
app->start;